#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Express:server');
var http = require('http');
var session_disconnect_all = require('../routes/analytics').session_disconnect_all;

/**
 * Get port from environment and store in Express.
 */
//This port number should be same as lanify_port in configuration.js
var port_no = '3000';
var port = normalizePort(process.env.PORT || port_no);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('../routes/socket').socket(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,function(error) {
  if(error)
    console.log("Error in starting the server");
  session_disconnect_all(function(err){
    if(err)
      console.log("Error in disconnecting all sockets"+err);
    console.log("All sockets disconnected");
  });
  console.log("Server is up and working");
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port numb
    // er
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
        console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener
 *
 * for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
